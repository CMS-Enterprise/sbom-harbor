/*
 * Harbor
 * Harbor SBOM Management API
 *
 * OpenAPI spec version: 2022-11-01 20:31:02UTC
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 6.2.1
 */


import http from "k6/http";
import { group, check, sleep } from "k6";
import { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.4.0/index.js';

// const BASE_URL = "https://d1gl1c9nl92jjp.cloudfront.net";
const BASE_URL = "https://d23cnlbtdmow47.cloudfront.net"
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

class TestContext {
    constructor() {
    }

    login() {
        let url = BASE_URL + `/login`;
        let body = `{"username": "${__ENV.ADMIN_USERNAME}", "password": "${__ENV.ADMIN_PASSWORD}"}`;
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let response = http.post(url, JSON.stringify(body), params);

        if (response.status !== 200) {
            console.log(`TestContext.login failed with ${response.status} - ${response.body}`)
            this.jwt = undefined;
            return false;
        }

        this.jwt = response.body["token"];
    }

    build() {
        if (!this.login()) {
            return false;
        }

        this.teamName = `e2e-${uuidv4()}`;

        let url = BASE_URL + `/api/v1/team?children=true`;
        let body = {"id": "", "name": this.teamName, "members": [], "projects": []};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let response = http.post(url, JSON.stringify(body), params);

        if (response.status !== 200) {
            console.log(`TestContext.build failed with ${response.status} - ${response.body}`)
            return false;
        }

        this.team = JSON.parse(response.body);

        if (this.team.name != this.teamName) {
            console.log(`TestContext.build failed name check: ${JSON.stringify(this)}`)
            return false;
        }

        return true;
    }

    teardown() {
        let url = BASE_URL + `/api/v1/team/${this.team.id}?children=true`;
        let response = http.del(url);

        if (response.status !== 200) {
            console.log(`TestContext.teardown failed with ${response.status} - ${response.body}`)
        }
    }

}

export default function() {
    const ctx = new TestContext()

    if (!ctx.build()) {
        console.error("failed to build TestContext");
    }

    console.info(`initiating e2e tests with ctx: ${ctx}`)


}

export function tests () {
    group("/api/v1/member", () => {
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/member?teamId=${teamId}`;
            // TODO: edit the parameters of the request body.
            let body = {"email": "string", "isTeamLead": "boolean"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Members of a team.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/tokens", () => {
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/tokens?teamId=${teamId}`;
            let request = http.get(url);

            check(request, {
                "A list of tokens.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/login", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/login`;
            // TODO: edit the parameters of the request body.
            let body = {"username": "string", "password": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Result of the login operation.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/team/{teamId}", () => {
        let children = 'TODO_EDIT_THE_CHILDREN'; // specify value as there is no example value for this parameter in OpenAPI spec
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/team/${teamId}?children=${children}`;
            let request = http.get(url);

            check(request, {
                "An organization made up of members, projects, codebases, and tokens.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/team/${teamId}?children=${children}`;
            let request = http.del(url);

            check(request, {
                "An organization made up of members, projects, codebases, and tokens.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/token", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/token`;
            // TODO: edit the parameters of the request body.
            let body = {"name": "string", "created": "date", "enabled": "boolean", "expires": "date", "token": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "A secret use to authenticate, authorize, and track SBOM upload operations.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/project/{projectId}", () => {
        let children = 'TODO_EDIT_THE_CHILDREN'; // specify value as there is no example value for this parameter in OpenAPI spec
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let projectId = 'TODO_EDIT_THE_PROJECTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/project/${projectId}?teamId=${teamId}&children=${children}`;
            let request = http.get(url);

            check(request, {
                "An initiative within an organization that includes one or more codebases.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/project/${projectId}?teamId=${teamId}&children=${children}`;
            let request = http.del(url);

            check(request, {
                "An initiative within an organization that includes one or more codebases.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/user/search", () => {
        let filter = 'TODO_EDIT_THE_FILTER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/user/search?filter=${filter}`;
            let request = http.get(url);

            check(request, {
                "The user search matches. Queries members by email address.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/member/{memberId}", () => {
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let memberId = 'TODO_EDIT_THE_MEMBERID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/member/${memberId}?teamId=${teamId}`;
            let request = http.get(url);

            check(request, {
                "Members of a team.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/member/${memberId}?teamId=${teamId}`;
            let request = http.del(url);

            check(request, {
                "Members of a team.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/codebase", () => {
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let projectId = 'TODO_EDIT_THE_PROJECTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/codebase?teamId=${teamId}&projectId=${projectId}`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "string", "name": "string", "language": "string", "buildTool": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "A collection of assets used to produce one or more software products, tools, or utilities. Usually maps to a source control repository.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/project", () => {
        let children = 'TODO_EDIT_THE_CHILDREN'; // specify value as there is no example value for this parameter in OpenAPI spec
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/project?teamId=${teamId}&children=${children}`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "string", "name": "string", "fisma": "string", "codebases": "list"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "An initiative within an organization that includes one or more codebases.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/team", () => {
        let children = 'TODO_EDIT_THE_CHILDREN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/team?children=${children}`;
            // TODO: edit the parameters of the request body.
            let body = {"id": "string", "name": "string", "members": "list", "projects": "list"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "An organization made up of members, projects, codebases, and tokens.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/token/{tokenId}", () => {
        let tokenId = 'TODO_EDIT_THE_TOKENID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/token/${tokenId}`;
            let request = http.get(url);

            check(request, {
                "A secret use to authenticate, authorize, and track SBOM upload operations.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/token/${tokenId}`;
            let request = http.del(url);

            check(request, {
                "A secret use to authenticate, authorize, and track SBOM upload operations.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/codebases", () => {
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let projectId = 'TODO_EDIT_THE_PROJECTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/codebases?teamId=${teamId}&projectId=${projectId}`;
            let request = http.get(url);

            check(request, {
                "A list of codebases.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/{teamId}/{projectId}/{codebaseId}/sbom", () => {
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let codebaseId = 'TODO_EDIT_THE_CODEBASEID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let projectId = 'TODO_EDIT_THE_PROJECTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/${teamId}/${projectId}/${codebaseId}/sbom`;
            // TODO: edit the parameters of the request body.
            let body = {"bomFormat": "string", "specVersion": "string", "serialNumber": "string", "version": "integer", "metadata": {"timestamp": "date", "tools": "list", "authors": "list", "component": "component_1", "manufacture": "organizationalentity_1", "supplier": "organizationalentity_1"}, "components": "set", "services": "set", "externalReferences": "list", "dependencies": "set", "compositions": "set"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "The result of an SBOM upload operation.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/projects", () => {
        let children = 'TODO_EDIT_THE_CHILDREN'; // specify value as there is no example value for this parameter in OpenAPI spec
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/projects?teamId=${teamId}&children=${children}`;
            let request = http.get(url);

            check(request, {
                "A list of projects.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/teams", () => {
        let children = 'TODO_EDIT_THE_CHILDREN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/teams?children=${children}`;
            let request = http.get(url);

            check(request, {
                "A list of teams.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/codebase/{codebaseId}", () => {
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let codebaseId = 'TODO_EDIT_THE_CODEBASEID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let projectId = 'TODO_EDIT_THE_PROJECTID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/codebase/${codebaseId}?teamId=${teamId}&projectId=${projectId}`;
            let request = http.get(url);

            check(request, {
                "A collection of assets used to produce one or more software products, tools, or utilities. Usually maps to a source control repository.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/codebase/${codebaseId}?teamId=${teamId}&projectId=${projectId}`;
            let request = http.del(url);

            check(request, {
                "A collection of assets used to produce one or more software products, tools, or utilities. Usually maps to a source control repository.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/members", () => {
        let teamId = 'TODO_EDIT_THE_TEAMID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/members?teamId=${teamId}`;
            let request = http.get(url);

            check(request, {
                "A list of members.": (r) => r.status === 200
            });
        }
    });

}
