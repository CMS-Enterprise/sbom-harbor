/*
 * Harbor
 * Harbor SBOM Management API
 *
 * OpenAPI spec version: 2022-11-01 20:31:02UTC
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 6.2.1
 */


import http from "k6/http";
import { group, check, sleep } from "k6";
import { uuidv4 } from 'https://jslib.k6.io/k6-utils/1.4.0/index.js';

// const BASE_URL = "https://d1gl1c9nl92jjp.cloudfront.net";
const BASE_URL = "https://d3qet91h5q7sf6.cloudfront.net"
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

const stringify = (obj) => {
    return JSON.stringify(obj, null, 4);
}

const debug = true;
const log = (message) => {
    if (!debug) {
        return
    }

    console.log(message);
}

const log_req = (url, body) => {
    log(`req: url - ${url} - body: ${stringify(body)}`);
}

const log_resp = (url, response) => {
    log(`response: url - ${url} body - ${stringify(response)}`);
}

class TestContext {
    constructor() {
        this.testId = uuidv4();
        this.teamIds = [];
        this.username = `${__ENV.ADMIN_USERNAME}`;
        this.password = `${__ENV.ADMIN_PASSWORD}`;
        // Create an enabled token, but set it to expire immediately so that it can't ever be used.
        this.expiryDate = new Date();
    }

    forLog() {
        return (({ testId, teamName, team, teamIds, expiryDate }) => ({ testId, teamName, team, teamIds, expiryDate }))(this);
    }

    login() {
        let url = BASE_URL + `/api/v1/login`;
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};

        // log_req(url, body);
        let response = http.post(url, JSON.stringify(this.bodyFor("login")), params);
        // log_resp(url, response.body);

        if (response.status !== 200) {
            this.jwt = undefined;
            return false;
        }

        this.jwt = JSON.parse(response.body).token;
        // log(`login success: ${this.jwt}`);

        this.headerParams = {
            headers: {
                "Content-Type": "application/json", "Accept": "application/json",
                "Authorization": `${this.jwt}`
            }
        };

        return true;
    }

    entityName(entityType) {
        if (!entityType) {
            entityType = "unknown";
        }

        return `e2e-${entityType}-${this.testId}`;
    }

    buildUp() {
        if (!this.login()) {
            return false;
        }

        this.teamName = this.entityName("team");

        this.ensureTeam();

        if (!this.team) {
            log(`TestContext.buildUp failed to create team: ${stringify(this)}`)
            return false;
        }

        if (this.team.name != this.teamName) {
            log(`TestContext.buildUp failed name check: ${stringify(this)}`)
            return false;
        }

        return true;
    }

    teardown() {
        this.teamIds.forEach(teamId => {
            let url = BASE_URL + `/api/v1/team/${teamId}?children=true`;
            let response = http.del(url, this.headerParams);

            if (response.status !== 200) {
                log(`TestContext.teardown failed for team id ${teamId} with ${response.status} - ${response.body}`)
            }
        });
    }

    getParamValue(queryStringKey) {
        switch(queryStringKey) {
            case "children":
                return true;
            case "filter":
                return this.username;
            case "teamId":
                this.ensureTeam();
                return this.team.id;
            case "memberId":
                this.ensureMember();
                return this.member.id;
            case "projectId":
                this.ensureProject();
                return this.project.id;
            case " codebaseId":
                this.ensureCodebase();
                return this.codebase.id;
            case "tokenId":
                this.ensureToken();
                return this.token.id;
        }
    }

    bodyFor(entityName) {
        switch (entityName) {
            case "login":
                return {username: this.username, password: this.password};
            case "team":
                // TODO: Add unique constraint on name and ensure it's enforced.
                return {id: "", name: this.teamName, members: [], projects: []};
            case "member":
                return {email: this.username, isTeamLead: true};
            case "project":
                return {id: "", name: this.entityName("project"), fisma: "", codebases: []};
            case "codebase":
                return {id: "", name: this.entityName("codebase"), language: "", buildTool: ""};
            case "token":
                return {name: this.entityName("token"), created: "", enabled: true, expires: this.expiryDate.toISOString(), token: this.testId};
            default:
                return undefined;
        }
    }

    createEntity(url, body, funcName) {
        // log_req(url, body);
        let response = http.post(url, JSON.stringify(body), this.headerParams);
        // log_resp(url, response.json());

        if (response.status !== 200) {
            console.error(`${funcName} failed with status ${response.status} and message ${response.body}`);
        }

        let result = JSON.parse(response.body);

        // log(`TestContext.${funcName}: ${stringify(result)}`);

        return result;
    }

    ensureTeam() {
        if (this.team) {
            return
        }

        let url = BASE_URL + `/api/v1/team?children=true`;

        this.team = this.createEntity(url, this.bodyFor("team"), "ensureTeam");
        this.teamIds.push(this.team.id);
    }

    ensureMember() {
        if (this.member) {
            return
        }

        // Ensure upstream requirements
        this.ensureTeam();

        let url = BASE_URL + `/api/v1/member?teamId=${this.team.id}`;

        this.member = this.createEntity(url, this.bodyFor("member"), "ensureMember");
    }

    ensureProject() {
        if (this.project) {
            return
        }

        // Ensure upstream requirements
        this.ensureTeam();

        // TODO: Dynamically test both values of booleans like children.
        let url = BASE_URL + `/api/v1/project?teamId=${this.team.id}&children=true`;

        this.project = this.createEntity(url, this.bodyFor("project"), "ensureProject");
    }

    ensureCodebase() {
        if (this.codebase) {
            return
        }

        this.ensureTeam();
        this.ensureProject();

        let url = BASE_URL + `/api/v1/codebase?teamId=${this.team.id}&projectId=${this.project.id}`;

        this.codebase = this.createEntity(url, this.bodyFor("codebase"), "ensureCodebase");
    }

    ensureToken() {
        if (this.token) {
            return
        }

        let url = BASE_URL + `/api/v1/token?teamId=${this.team.id}`;

        this.token = this.createEntity(url, this.bodyFor("token"), "ensureToken");
    }
}

const initContext = () => {
    const ctx = new TestContext()

    if (!ctx.buildUp()) {
        console.error("failed to build TestContext");
        return;
    }

    log(`initiating e2e tests with ctx: ${stringify(ctx.forLog())}`);

    return ctx;
}

export default function () {
    let ctx = initContext();

    group("/api/v1/member", () => {
        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/member?teamId=${teamId}`;
            // TODO: edit the parameters of the request body.
            let body = ctx.bodyFor("member");
            let params = ctx.headerParams;
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Members of a team.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/tokens", () => {
        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/tokens?teamId=${teamId}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "A list of tokens.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/login", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/login`;
            let body = ctx.bodyFor("login");
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Result of the login operation.": (r) => r.status === 200
            });
        }
    });


    group("/api/v1/team/{teamId}", () => {
        let children = ctx.getParamValue("children");
        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/team/${teamId}?children=${children}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "An organization made up of members, projects, codebases, and tokens.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/team/${teamId}?children=${children}`;
            let request = http.del(url, ctx.headerParams);

            check(request, {
                "An organization made up of members, projects, codebases, and tokens.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/token", () => {

        // Request No. 1
        {
            let teamId = ctx.getParamValue("teamId");

            let url = BASE_URL + `/api/v1/token?teamId=${teamId}`;
            let body = ctx.bodyFor("token");
            let request = http.post(url, JSON.stringify(body), ctx.headerParams);

            check(request, {
                "A secret use to authenticate, authorize, and track SBOM upload operations.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/project/{projectId}", () => {
        let children = ctx.getParamValue("children");
        let teamId = ctx.getParamValue("teamId");
        let projectId = ctx.getParamValue("projectId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/project/${projectId}?teamId=${teamId}&children=${children}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "An initiative within an organization that includes one or more codebases.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/project/${projectId}?teamId=${teamId}&children=${children}`;
            let request = http.del(url, ctx.headerParams);

            check(request, {
                "An initiative within an organization that includes one or more codebases.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/user/search", () => {
        let filter = ctx.getParamValue("filter");
        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/user/search?filter=${filter}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "The user search matches. Queries members by email address.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/member/{memberId}", () => {
        let teamId = ctx.getParamValue("teamId");
        let memberId = ctx.getParamValue("memberId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/member/${memberId}?teamId=${teamId}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "Members of a team.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/member/${memberId}?teamId=${teamId}`;
            let request = http.del(url, ctx.headerParams);

            check(request, {
                "Members of a team.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/codebase", () => {
        let teamId = ctx.getParamValue("teamId");
        let projectId = ctx.getParamValue("projectId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/codebase?teamId=${teamId}&projectId=${projectId}`;
            // TODO: edit the parameters of the request body.
            let body = ctx.bodyFor("codebase");
            let params = ctx.headerParams
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "A collection of assets used to produce one or more software products, tools, or utilities. Usually maps to a source control repository.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/project", () => {
        let children = ctx.getParamValue("children");
        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/project?teamId=${teamId}&children=${children}`;
            // TODO: edit the parameters of the request body.
            let body = ctx.bodyFor("project");
            let params = ctx.headerParams
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "An initiative within an organization that includes one or more codebases.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/team", () => {
        let children = ctx.getParamValue("children");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/team?children=${children}`;
            // TODO: edit the parameters of the request body.
            let body = ctx.bodyFor("team");
            let params = ctx.headerParams
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "An organization made up of members, projects, codebases, and tokens.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/token/{tokenId}", () => {
        let teamId = ctx.getParamValue("teamId");
        let tokenId = ctx.getParamValue("tokenId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/token/${tokenId}?teamId=${teamId}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "A secret use to authenticate, authorize, and track SBOM upload operations.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/token/${tokenId}?teamId=${teamId}`;
            let request = http.del(url, ctx.headerParams);

            check(request, {
                "A secret use to authenticate, authorize, and track SBOM upload operations.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/codebases", () => {
        let teamId = ctx.getParamValue("teamId");
        let projectId = ctx.getParamValue("projectId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/codebases?teamId=${teamId}&projectId=${projectId}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "A list of codebases.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/{teamId}/{projectId}/{codebaseId}/sbom", () => {
        let teamId = ctx.getParamValue("teamId");
        let codebaseId = ctx.getParamValue("codebaseId");
        let projectId = ctx.getParamValue("projectId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/${teamId}/${projectId}/${codebaseId}/sbom`;
            // TODO: edit the parameters of the request body.
            let body = {"bomFormat": "string", "specVersion": "string", "serialNumber": "string", "version": "integer", "metadata": {"timestamp": "date", "tools": "list", "authors": "list", "component": "component_1", "manufacture": "organizationalentity_1", "supplier": "organizationalentity_1"}, "components": "set", "services": "set", "externalReferences": "list", "dependencies": "set", "compositions": "set"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "The result of an SBOM upload operation.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/projects", () => {
        let children = ctx.getParamValue("children");
        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/projects?teamId=${teamId}&children=${children}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "A list of projects.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/teams", () => {
        let children = ctx.getParamValue("children");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/teams?children=${children}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "A list of teams.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/codebase/{codebaseId}", () => {
        let teamId = ctx.getParamValue("teamId");
        let codebaseId = ctx.getParamValue("codebaseId");
        let projectId = ctx.getParamValue("projectId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/codebase/${codebaseId}?teamId=${teamId}&projectId=${projectId}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "A collection of assets used to produce one or more software products, tools, or utilities. Usually maps to a source control repository.": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/codebase/${codebaseId}?teamId=${teamId}&projectId=${projectId}`;
            let request = http.del(url, ctx.headerParams);

            check(request, {
                "A collection of assets used to produce one or more software products, tools, or utilities. Usually maps to a source control repository.": (r) => r.status === 200
            });
        }
    });

    group("/api/v1/members", () => {
        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/members?teamId=${teamId}`;
            let request = http.get(url, ctx.headerParams);

            check(request, {
                "A list of members.": (r) => r.status === 200
            });
        }
    });

     ctx.teardown();
}
