/*
 * Harbor
 * Harbor SBOM Management API
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 6.2.1
 */


import http from "k6/http";
import { group, check, sleep } from "k6";
import {TestContext} from "../test-context.js";

const BASE_URL = `${__ENV.CF_DOMAIN}`;
// Sleep duration between successive requests.
const SLEEP_DURATION = 0.01;

let ctx = new TestContext();

let test_route = undefined;
if (__ENV.TEST_ROUTE) {
    test_route = `${__ENV.TEST_ROUTE}`;
}

export default function() {
    if (!ctx.init()) {
        return
    }

    group("/api/v1/member", () => {
        let route = "/api/v1/member";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/member?teamId=${teamId}`;
            let method = "post";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.post(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "Members of a team.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/tokens", () => {
        let route = "/api/v1/tokens";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/tokens?teamId=${teamId}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A list of tokens.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/login", () => {
        let route = "/api/v1/login";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }


        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/login`;
            let method = "post";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.post(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "Result of the login operation.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/team/{teamId}", () => {
        let route = "/api/v1/team/{teamId}";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let children = ctx.getParamValue("children");
        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/team/${teamId}?children=${children}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "An organization made up of members, projects, codebases, and tokens.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/team/${teamId}?children=${children}`;
            let method = "del";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not params DELETE
            let request = http.del(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "An organization made up of members, projects, codebases, and tokens.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/token", () => {
        let route = "/api/v1/token";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/token?teamId=${teamId}`;
            let method = "post";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.post(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A secret use to authenticate, authorize, and track SBOM upload operations.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/user/search", () => {
        let route = "/api/v1/user/search";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let filter = ctx.getParamValue("filter");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/user/search?filter=${filter}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "The user search matches. Queries members by email address.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/project/{projectId}", () => {
        let route = "/api/v1/project/{projectId}";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let children = ctx.getParamValue("children");
        let teamId = ctx.getParamValue("teamId");
        let projectId = ctx.getParamValue("projectId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/project/${projectId}?teamId=${teamId}&children=${children}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "An initiative within an organization that includes one or more codebases.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/project/${projectId}?teamId=${teamId}&children=${children}`;
            let method = "del";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not params DELETE
            let request = http.del(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "An initiative within an organization that includes one or more codebases.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/member/{memberId}", () => {
        let route = "/api/v1/member/{memberId}";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let teamId = ctx.getParamValue("teamId");
        let memberId = ctx.getParamValue("memberId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/member/${memberId}?teamId=${teamId}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "Members of a team.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/member/${memberId}?teamId=${teamId}`;
            let method = "del";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not params DELETE
            let request = http.del(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "Members of a team.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/codebase", () => {
        let route = "/api/v1/codebase";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let teamId = ctx.getParamValue("teamId");
        let projectId = ctx.getParamValue("projectId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/codebase?teamId=${teamId}&projectId=${projectId}`;
            let method = "post";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.post(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A collection of assets used to produce one or more software products, tools, or utilities. Usually maps to a source control repository.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/project", () => {
        let route = "/api/v1/project";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let children = ctx.getParamValue("children");
        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/project?teamId=${teamId}&children=${children}`;
            let method = "post";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.post(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "An initiative within an organization that includes one or more codebases.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/team", () => {
        let route = "/api/v1/team";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let children = ctx.getParamValue("children");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/team?children=${children}`;
            let method = "post";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.post(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "An organization made up of members, projects, codebases, and tokens.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/token/{tokenId}", () => {
        let route = "/api/v1/token/{tokenId}";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let tokenId = ctx.getParamValue("tokenId");
        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/token/${tokenId}?teamId=${teamId}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A secret use to authenticate, authorize, and track SBOM upload operations.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/token/${tokenId}?teamId=${teamId}`;
            let method = "del";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not params DELETE
            let request = http.del(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A secret use to authenticate, authorize, and track SBOM upload operations.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/codebases", () => {
        let route = "/api/v1/codebases";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let teamId = ctx.getParamValue("teamId");
        let projectId = ctx.getParamValue("projectId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/codebases?teamId=${teamId}&projectId=${projectId}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A list of codebases.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/{teamId}/{projectId}/{codebaseId}/sbom", () => {
        let route = "/api/v1/{teamId}/{projectId}/{codebaseId}/sbom";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let teamId = ctx.getParamValue("teamId");
        let codebaseId = ctx.getParamValue("codebaseId");
        let projectId = ctx.getParamValue("projectId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/${teamId}/${projectId}/${codebaseId}/sbom`;
            let method = "post";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.post(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "The result of an SBOM upload operation.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/projects", () => {
        let route = "/api/v1/projects";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let children = ctx.getParamValue("children");
        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/projects?teamId=${teamId}&children=${children}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A list of projects.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/teams", () => {
        let route = "/api/v1/teams";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let children = ctx.getParamValue("children");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/teams?children=${children}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A list of teams.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/codebase/{codebaseId}", () => {
        let route = "/api/v1/codebase/{codebaseId}";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let teamId = ctx.getParamValue("teamId");
        let codebaseId = ctx.getParamValue("codebaseId");
        let projectId = ctx.getParamValue("projectId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/codebase/${codebaseId}?teamId=${teamId}&projectId=${projectId}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A collection of assets used to produce one or more software products, tools, or utilities. Usually maps to a source control repository.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/api/v1/codebase/${codebaseId}?teamId=${teamId}&projectId=${projectId}`;
            let method = "del";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not params DELETE
            let request = http.del(url, body, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A collection of assets used to produce one or more software products, tools, or utilities. Usually maps to a source control repository.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    group("/api/v1/members", () => {
        let route = "/api/v1/members";
        // If we want to test a single route, and this is not it, exit.
        if (test_route && route !== test_route) {
            return;
        }

        let teamId = ctx.getParamValue("teamId");

        // Request No. 1
        {
            let url = BASE_URL + `/api/v1/members?teamId=${teamId}`;
            let method = "get";
            let body = ctx.bodyFor(route);

            let params = {headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": ctx.tokenFor(route)
            }};

            // Not delete
            let request = http.get(url, params);

            if (ctx.isFixture(method, route)) {
                return;
            }

            check(request, {
                "A list of members.": (r) => {
                    if (r.status !== 200) {
                        console.log(`${r.request.method}: ${r.url.replace(BASE_URL, '')} failed with ${r.status} - ${JSON.stringify(r.body)}`);
                    } else {
                        ctx.handleFixtures(method, route, r.body);
                    }
                    return r.status === 200
                }
            });
        }
    });

    ctx.teardown();
}
