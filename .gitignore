**/.idea/
.vscode
.vscode/*
.coverage

# outputs
**/build/
**/dist/
**/.coverage/
cdk.out/
cdk.context.json
cdk-outputs*.json

# python
__pycache__/

# node
**/node_modules/

# log files
**/*.log

# temporary folders
tmp/
**/temp/
**/.cache/
**/.temp/

# macos
**/.DS_Store

# dotenv
.env
.env.*

ui/.yarn/*
!ui/.yarn/patches
!ui/.yarn/plugins
!ui/.yarn/releases
!ui/.yarn/sdks
!ui/.yarn/versions

# Go generator
harbor-sbom-generator/main
harbor-sbom-generator/*.zip

# api documentation
harbor-documentation/openapi.json

# rust
**/target/
**/.cargo/
**/Cargo.lock

# harbor-rs
harbor-rs/tests/fixtures/debug.log
harbor-rs/tests/fixtures/pilot-request.json
harbor-rs/tests/fixtures/HARBOR_PILOT_REQUEST

**/.terraform/providers/*
**/terraform.tfstate
**/terraform.tfstate.backup

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
