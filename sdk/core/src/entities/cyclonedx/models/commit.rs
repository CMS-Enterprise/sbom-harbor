use serde::{Deserialize, Serialize};
/*
 * Generated by: https://openapi-generator.tech
 */

/// Commit : Specifies an individual commit
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Commit {
    /// A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    /// The URL to the commit. This URL will typically point to a commit in a version control system.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<crate::entities::cyclonedx::models::IdentifiableAction>>,
    #[serde(rename = "committer", skip_serializing_if = "Option::is_none")]
    pub committer: Option<Box<crate::entities::cyclonedx::models::IdentifiableAction>>,
    /// The text description of the contents of the commit
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

impl Commit {
    /// Specifies an individual commit
    pub fn new() -> Commit {
        Commit {
            uid: None,
            url: None,
            author: None,
            committer: None,
            message: None,
        }
    }
}
