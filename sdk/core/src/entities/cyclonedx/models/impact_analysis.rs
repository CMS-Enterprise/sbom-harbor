use serde::{Deserialize, Serialize};
/*
 * Generated by: https://openapi-generator.tech
 */

/// ImpactAnalysis : An assessment of the impact and exploitability of the vulnerability.
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ImpactAnalysis {
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<crate::entities::cyclonedx::models::ImpactAnalysisState>,
    #[serde(rename = "justification", skip_serializing_if = "Option::is_none")]
    pub justification: Option<crate::entities::cyclonedx::models::ImpactAnalysisJustification>,
    /// A response to the vulnerability by the manufacturer, supplier, or project responsible for the affected component or service. More than one response is allowed. Responses are strongly encouraged for vulnerabilities where the analysis state is exploitable.
    #[serde(rename = "response", skip_serializing_if = "Option::is_none")]
    pub response: Option<Vec<Response>>,
    /// Detailed description of the impact including methods used during assessment. If a vulnerability is not exploitable, this field should include specific details on why the component or service is not impacted by this vulnerability.
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
}

impl ImpactAnalysis {
    /// An assessment of the impact and exploitability of the vulnerability.
    pub fn new() -> ImpactAnalysis {
        ImpactAnalysis {
            state: None,
            justification: None,
            response: None,
            detail: None,
        }
    }
}

/// A response to the vulnerability by the manufacturer, supplier, or project responsible for the affected component or service. More than one response is allowed. Responses are strongly encouraged for vulnerabilities where the analysis state is exploitable.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Response {
    #[serde(rename = "can_not_fix")]
    CanNotFix,
    #[serde(rename = "will_not_fix")]
    WillNotFix,
    #[serde(rename = "update")]
    Update,
    #[serde(rename = "rollback")]
    Rollback,
    #[serde(rename = "workaround_available")]
    WorkaroundAvailable,
}

impl Default for Response {
    fn default() -> Response {
        Self::CanNotFix
    }
}
