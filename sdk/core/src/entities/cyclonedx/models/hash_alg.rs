use serde::{Deserialize, Serialize};
/*
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HashAlg {
    #[serde(rename = "MD5")]
    Md5,
    #[serde(rename = "SHA-1")]
    Sha1,
    #[serde(rename = "SHA-256")]
    Sha256,
    #[serde(rename = "SHA-384")]
    Sha384,
    #[serde(rename = "SHA-512")]
    Sha512,
    #[serde(rename = "SHA3-256")]
    Sha3256,
    #[serde(rename = "SHA3-384")]
    Sha3384,
    #[serde(rename = "SHA3-512")]
    Sha3512,
    #[serde(rename = "BLAKE2b-256")]
    Blake2b256,
    #[serde(rename = "BLAKE2b-384")]
    Blake2b384,
    #[serde(rename = "BLAKE2b-512")]
    Blake2b512,
    #[serde(rename = "BLAKE3")]
    Blake3,
}

impl ToString for HashAlg {
    fn to_string(&self) -> String {
        match self {
            Self::Md5 => String::from("MD5"),
            Self::Sha1 => String::from("SHA-1"),
            Self::Sha256 => String::from("SHA-256"),
            Self::Sha384 => String::from("SHA-384"),
            Self::Sha512 => String::from("SHA-512"),
            Self::Sha3256 => String::from("SHA3-256"),
            Self::Sha3384 => String::from("SHA3-384"),
            Self::Sha3512 => String::from("SHA3-512"),
            Self::Blake2b256 => String::from("BLAKE2b-256"),
            Self::Blake2b384 => String::from("BLAKE2b-384"),
            Self::Blake2b512 => String::from("BLAKE2b-512"),
            Self::Blake3 => String::from("BLAKE3"),
        }
    }
}

impl Default for HashAlg {
    fn default() -> HashAlg {
        Self::Md5
    }
}
