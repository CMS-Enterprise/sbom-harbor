use crate::entities::cyclonedx::Issue;
use serde::{Deserialize, Serialize};
use std::fmt::Display;

/// Identified security issue for a [Package].
#[serde(rename_all = "camelCase")]
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Vulnerability {
    /// Unique identifier for the Vulnerability.
    pub id: String,

    /// Indicates which system reported the vulnerability.
    pub source: Source,

    /// The Package URL for the vulnerability.
    pub purl: Option<String>,
}

impl From<Issue> for Vulnerability {
    fn from(value: Issue) -> Self {
        todo!()
    }
}

/// Discriminator used to indicate what system identified a [Vulnerability].
#[serde(rename_all = "camelCase")]
#[derive(Clone, Debug, Deserialize, Serialize)]
pub enum Source {
    DependencyTrack,
    IonChannel,
    Snyk,
}
