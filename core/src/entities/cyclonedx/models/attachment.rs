use serde::{Deserialize, Serialize};
/*
 * Generated by: https://openapi-generator.tech
 */

/// Attachment : Specifies the metadata and content for an attachment.
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Attachment {
    /// Specifies the content type of the text. Defaults to text/plain if not specified.
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    /// Specifies the optional encoding the text is represented in.
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<Encoding>,
    /// The attachment data. Proactive controls such as input validation and sanitization should be employed to prevent misuse of attachment text.
    #[serde(rename = "content")]
    pub content: String,
}

impl Attachment {
    /// Specifies the metadata and content for an attachment.
    pub fn new(content: String) -> Attachment {
        Attachment {
            content_type: None,
            encoding: None,
            content,
        }
    }
}

/// Specifies the optional encoding the text is represented in.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Encoding {
    #[serde(rename = "base64")]
    Base64,
}

impl Default for Encoding {
    fn default() -> Encoding {
        Self::Base64
    }
}

