use serde::{Deserialize, Serialize};
/*
 * Generated by: https://openapi-generator.tech
 */

/// Vulnerability : Defines a weakness in an component or service that could be exploited or triggered by a threat source.
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Vulnerability {
    #[serde(rename = "bom-ref", skip_serializing_if = "Option::is_none")]
    pub bom_ref: Option<String>,
    /// The identifier that uniquely identifies the vulnerability.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::models::cyclonedx::VulnerabilitySource>>,
    /// Zero or more pointers to vulnerabilities that are the equivalent of the vulnerability specified. Often times, the same vulnerability may exist in multiple sources of vulnerability intelligence, but have different identifiers. References provide a way to correlate vulnerabilities across multiple sources of vulnerability intelligence.
    #[serde(rename = "references", skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<crate::models::cyclonedx::ReferencesInner>>,
    /// List of vulnerability ratings
    #[serde(rename = "ratings", skip_serializing_if = "Option::is_none")]
    pub ratings: Option<Vec<crate::models::cyclonedx::Rating>>,
    /// List of Common Weaknesses Enumerations (CWEs) codes that describes this vulnerability. For example 399 (of https://cwe.mitre.org/data/definitions/399.html)
    #[serde(rename = "cwes", skip_serializing_if = "Option::is_none")]
    pub cwes: Option<Vec<i32>>,
    /// A description of the vulnerability as provided by the source.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If available, an in-depth description of the vulnerability as provided by the source organization. Details often include examples, proof-of-concepts, and other information useful in understanding root cause.
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
    /// Recommendations of how the vulnerability can be remediated or mitigated.
    #[serde(rename = "recommendation", skip_serializing_if = "Option::is_none")]
    pub recommendation: Option<String>,
    /// Published advisories of the vulnerability if provided.
    #[serde(rename = "advisories", skip_serializing_if = "Option::is_none")]
    pub advisories: Option<Vec<crate::models::cyclonedx::Advisory>>,
    /// The date and time (timestamp) when the vulnerability record was created in the vulnerability database.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// The date and time (timestamp) when the vulnerability record was first published.
    #[serde(rename = "published", skip_serializing_if = "Option::is_none")]
    pub published: Option<String>,
    /// The date and time (timestamp) when the vulnerability record was last updated.
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    #[serde(rename = "credits", skip_serializing_if = "Option::is_none")]
    pub credits: Option<Box<crate::models::cyclonedx::Credits>>,
    /// The tool(s) used to identify, confirm, or score the vulnerability.
    #[serde(rename = "tools", skip_serializing_if = "Option::is_none")]
    pub tools: Option<Vec<crate::models::cyclonedx::Tool>>,
    #[serde(rename = "analysis", skip_serializing_if = "Option::is_none")]
    pub analysis: Option<Box<crate::models::cyclonedx::ImpactAnalysis>>,
    /// The components or services that are affected by the vulnerability.
    #[serde(rename = "affects", skip_serializing_if = "Option::is_none")]
    pub affects: Option<Vec<crate::models::cyclonedx::AffectsInner>>,
    /// Provides the ability to document properties in a name-value store. This provides flexibility to include data not officially supported in the standard without having to use additional namespaces or create extensions. Unlike key-value stores, properties support duplicate names, each potentially having different values. Property names of interest to the general public are encouraged to be registered in the [CycloneDX Property Taxonomy](https://github.com/CycloneDX/cyclonedx-property-taxonomy). Formal registration is OPTIONAL.
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<crate::models::cyclonedx::Property>>,
}

impl Vulnerability {
    /// Defines a weakness in an component or service that could be exploited or triggered by a threat source.
    pub fn new() -> Vulnerability {
        Vulnerability {
            bom_ref: None,
            id: None,
            source: None,
            references: None,
            ratings: None,
            cwes: None,
            description: None,
            detail: None,
            recommendation: None,
            advisories: None,
            created: None,
            published: None,
            updated: None,
            credits: None,
            tools: None,
            analysis: None,
            affects: None,
            properties: None,
        }
    }
}


