use serde::{Deserialize, Serialize};
/*
 * Generated by: https://openapi-generator.tech
 */

/// Issue : An individual issue that has been resolved.
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Issue {
    /// Specifies the type of issue
    #[serde(rename = "type")]
    pub r#type: IssueType,
    /// The identifier of the issue assigned by the source of the issue
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the issue
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A description of the issue
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::entities::cyclonedx::models::Source>>,
    /// A collection of URL's for reference. Multiple URLs are allowed.
    #[serde(rename = "references", skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<String>>,
}

impl Issue {
    /// An individual issue that has been resolved.
    pub fn new(r#type: IssueType) -> Issue {
        Issue {
            r#type,
            id: None,
            name: None,
            description: None,
            source: None,
            references: None,
        }
    }
}

/// Specifies the type of issue
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IssueType {
    #[serde(rename = "defect")]
    Defect,
    #[serde(rename = "enhancement")]
    Enhancement,
    #[serde(rename = "security")]
    Security,
}

impl Default for IssueType {
    fn default() -> IssueType {
        Self::Defect
    }
}
