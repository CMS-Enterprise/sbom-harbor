use serde::{Deserialize, Serialize};
/*
 * Generated by: https://openapi-generator.tech
 */

/// Rating : Defines the severity or risk ratings of a vulnerability.
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Rating {
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::entities::cyclonedx::models::VulnerabilitySource>>,
    /// The numerical score of the rating.
    #[serde(rename = "score", skip_serializing_if = "Option::is_none")]
    pub score: Option<f32>,
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<crate::entities::cyclonedx::models::Severity>,
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<crate::entities::cyclonedx::models::ScoreMethod>,
    /// Textual representation of the metric values used to score the vulnerability
    #[serde(rename = "vector", skip_serializing_if = "Option::is_none")]
    pub vector: Option<String>,
    /// An optional reason for rating the vulnerability as it was
    #[serde(rename = "justification", skip_serializing_if = "Option::is_none")]
    pub justification: Option<String>,
}

impl Rating {
    /// Defines the severity or risk ratings of a vulnerability.
    pub fn new() -> Rating {
        Rating {
            source: None,
            score: None,
            severity: None,
            method: None,
            vector: None,
            justification: None,
        }
    }
}
