use serde::{Deserialize, Serialize};
/*
 * Generated by: https://openapi-generator.tech
 */

/// Specifies the flow direction of the data. Direction is relative to the service. Inbound flow states that data enters the service. Outbound flow states that data leaves the service. Bi-directional states that data flows both ways, and unknown states that the direction is not known.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DataFlow {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
    #[serde(rename = "bi-directional")]
    BiDirectional,
    #[serde(rename = "unknown")]
    Unknown,

}

impl ToString for DataFlow {
    fn to_string(&self) -> String {
        match self {
            Self::Inbound => String::from("inbound"),
            Self::Outbound => String::from("outbound"),
            Self::BiDirectional => String::from("bi-directional"),
            Self::Unknown => String::from("unknown"),
        }
    }
}

impl Default for DataFlow {
    fn default() -> DataFlow {
        Self::Inbound
    }
}




