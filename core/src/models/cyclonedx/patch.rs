use serde::{Deserialize, Serialize};
/*
 * Generated by: https://openapi-generator.tech
 */

/// Patch : Specifies an individual patch
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Patch {
    /// Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality.  * __unofficial__ = A patch which is not developed by the creators or maintainers of the software being patched. Refer to [https://en.wikipedia.org/wiki/Unofficial_patch](https://en.wikipedia.org/wiki/Unofficial_patch) * __monkey__ = A patch which dynamically modifies runtime behavior. Refer to [https://en.wikipedia.org/wiki/Monkey_patch](https://en.wikipedia.org/wiki/Monkey_patch) * __backport__ = A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to [https://en.wikipedia.org/wiki/Backporting](https://en.wikipedia.org/wiki/Backporting) * __cherry-pick__ = A patch created by selectively applying commits from other versions or branches of the same software.
    #[serde(rename = "type")]
    pub r#type: PatchType,
    #[serde(rename = "diff", skip_serializing_if = "Option::is_none")]
    pub diff: Option<Box<crate::models::cyclonedx::Diff>>,
    /// A collection of issues the patch resolves
    #[serde(rename = "resolves", skip_serializing_if = "Option::is_none")]
    pub resolves: Option<Vec<crate::models::cyclonedx::Issue>>,
}

impl Patch {
    /// Specifies an individual patch
    pub fn new(r#type: PatchType) -> Patch {
        Patch {
            r#type,
            diff: None,
            resolves: None,
        }
    }
}

/// Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality.  * __unofficial__ = A patch which is not developed by the creators or maintainers of the software being patched. Refer to [https://en.wikipedia.org/wiki/Unofficial_patch](https://en.wikipedia.org/wiki/Unofficial_patch) * __monkey__ = A patch which dynamically modifies runtime behavior. Refer to [https://en.wikipedia.org/wiki/Monkey_patch](https://en.wikipedia.org/wiki/Monkey_patch) * __backport__ = A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to [https://en.wikipedia.org/wiki/Backporting](https://en.wikipedia.org/wiki/Backporting) * __cherry-pick__ = A patch created by selectively applying commits from other versions or branches of the same software.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PatchType {
    #[serde(rename = "unofficial")]
    Unofficial,
    #[serde(rename = "monkey")]
    Monkey,
    #[serde(rename = "backport")]
    Backport,
    #[serde(rename = "cherry-pick")]
    CherryPick,
}

impl Default for PatchType {
    fn default() -> PatchType {
        Self::Unofficial
    }
}

